import org.gradle.api.services.BuildService;
import org.gradle.api.services.BuildServiceParameters;

plugins {
    id 'com.gorylenko.gradle-git-properties' version '2.4.1' apply false
    id "com.jfrog.artifactory" version "4.33.1"
    id 'jacoco'
    id 'java'
    id 'java-library'
    id 'org.liquibase.gradle' version '2.2.0'
    id 'org.sonarqube' version '4.2.1.3168'
    id 'org.springframework.boot' version '3.1.1' apply false
    id 'org.jetbrains.kotlin.jvm' version '1.9.0'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.0'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.0'
}

def artifactoryAuthentication(MavenArtifactRepository repo) {
    repo.credentials(PasswordCredentials) {
        username = artifactory_user
        password = artifactory_token_secret
    }
}

def noParallelUsageService = project.getGradle().getSharedServices().registerIfAbsent(
        "noParallelUsageService",
        AbstractService.class,
        spec -> {
            spec.getMaxParallelUsages().set(1);
        }
);

ext {
    platformVersion = '6.0.2'
}
def exclusionList = [
        "**/com/vwgroup/hwp/partlistbrowser/configuration/*",
        "**/com/vwgroup/hwp/partlistbrowser/PatiApplication.java",
        "**/com/vwgroup/hwp/partlistbrowser/service/configuration/*"
]
allprojects {
    group 'com.vwgroup.hwp.pati'
    version '2.3.0-SNAPSHOT'

    apply plugin: 'java-library'

    sourceCompatibility = 17
    targetCompatibility = 17

    repositories {
        maven {
            url "${artifactory_url}/ap-releases/"
            artifactoryAuthentication it
        }
        maven {
            url "${artifactory_url}/ap-snapshots/"
            artifactoryAuthentication it
        }
        maven {
            url "${artifactory_url}/apache-maven/"
            artifactoryAuthentication it
        }
    }
}

subprojects {

    each {
        buildDir = "$project.rootDir/build/${project.path.replace(':', '/')}" as File
        afterEvaluate {
            if (!tasks.findByName('bootJar')?.enabled) {
                archivesBaseName = "${group}.${name}"
            }
        }

        tasks.withType(JavaCompile) {
            options.encoding = 'UTF-8'
            options.compilerArgs += [
                    '-Amapstruct.unmappedTargetPolicy=ERROR'
            ]
        }
    }

    // There is a problem with long paths on windows, so jacoco is not used than
    if (!System.properties['os.name'].toLowerCase().contains('windows')) {
        apply plugin: 'jacoco'
    }
    apply plugin: 'org.sonarqube'

    // let each subproject report the merged coverage report
    sonarqube {
        properties {
            property 'sonar.coverage.exclusions', exclusionList
            property 'sonar.coverage.jacoco.xmlReportPaths', "$project.rootDir/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
        }
    }

    testing {
        suites {
            test {
                targets {
                    configureEach {
                        testTask.configure {
                            finalizedBy jacocoTestReport
                            useJUnitPlatform()
                            maxHeapSize = "2048m"
                        }
                    }
                }
            }

            integrationTest(JvmTestSuite) {
                dependencies {
                    implementation project(':app')
                }

                sources {
                    java {
                        srcDirs = ['src/integrationTest/java']
                    }
                }

                targets {
                    configureEach {
                        testTask.configure {
                            shouldRunAfter(test)
                            // In the future we could use Gradle BuildService to start multiple instances of Postgres to
                            // parallelize IntegrationTests as well. But for now this will suffice, because we are just
                            // starting to implement IntegrationTests.
                            usesService(noParallelUsageService)
                        }
                    }
                }
            }
        }
    }

    tasks.named('check') {
        dependsOn(testing.suites.integrationTest)
    }

    jacocoTestReport {
        reports {
            xml{
                enabled true
            }
            csv {
                enabled false
            }
            html{
                enabled false
                }
        }
    }

    dependencies {
        [
                'implementation', 'compileOnly', 'annotationProcessor',
                'testCompileOnly', 'testAnnotationProcessor',
                'integrationTestImplementation', 'integrationTestAnnotationProcessor',
        ].each {
            add it, enforcedPlatform("com.vwgroup.hwp:common-platform:${rootProject.ext.platformVersion}")
        }

        constraints {
            api 'com.vwgroup.gurobi:gurobi-environment:0.0.5'
            api 'com.vwgroup.gurobi:gurobi-lib:9.1'
            api 'com.vwgroup.gurobi:gurobi-linux-lib:9.1.2'
            api 'com.vwgroup.hwp:balancing-optimization:1.0-SNAPSHOT'
            api "com.vwgroup.hwp:common-auth:${rootProject.ext.platformVersion}"
            api "com.vwgroup.hwp:common-base:${rootProject.ext.platformVersion}"
            api "com.vwgroup.hwp:common-gdpr:${rootProject.ext.platformVersion}"
            api "com.vwgroup.hwp:common-defaultproperties:${rootProject.ext.platformVersion}"
            api 'com.vwgroup.hwp:tier-calculations-backend:14'
        }

        implementation(
                'org.springframework.boot:spring-boot-starter-logging',
                'org.springframework.boot:spring-boot-starter-validation',
                'org.mapstruct:mapstruct',
                'org.mapstruct:mapstruct-processor',
                'com.google.code.gson:gson',
                'org.apache.httpcomponents.client5:httpclient5'
        )

        compileOnly(
                'org.projectlombok:lombok',
                'com.google.code.findbugs:jsr305'
        )

        annotationProcessor(
                'org.projectlombok:lombok',
                'org.mapstruct:mapstruct',
                'org.mapstruct:mapstruct-processor',
                'org.projectlombok:lombok-mapstruct-binding',
                'org.mapstruct.extensions.spring:mapstruct-spring-extensions',
                'org.mapstruct.extensions.spring:mapstruct-spring-annotations',
                'org.mapstruct:mapstruct-processor',
                'org.hibernate:hibernate-jpamodelgen'
        )

        runtimeOnly(
                'com.h2database:h2'
        )

        testImplementation(
                'org.junit.jupiter:junit-jupiter',
                'org.assertj:assertj-core',
                'org.mockito:mockito-core',
                'org.mockito:mockito-junit-jupiter',
                'org.hamcrest:hamcrest',
                'org.springframework.boot:spring-boot-test',
                'io.zonky.test:embedded-postgres:2.0.0',
                'io.zonky.test:embedded-database-spring-test:2.0.0'
        )

        testCompileOnly(
                'org.projectlombok:lombok'
        )

        testRuntimeOnly(
                'org.junit.platform:junit-platform-engine',
                'org.junit.platform:junit-platform-commons'
        )

        testAnnotationProcessor(
                'org.projectlombok:lombok',
                'org.mapstruct:mapstruct',
                'org.mapstruct:mapstruct-processor',
                'org.projectlombok:lombok-mapstruct-binding',
                'org.mapstruct.extensions.spring:mapstruct-spring-extensions',
                'org.mapstruct.extensions.spring:mapstruct-spring-annotations',
                'org.mapstruct:mapstruct-processor'
        )

        pluginManager.withPlugin('java-test-fixtures') {
            ['testFixturesImplementation', 'testFixturesAnnotationProcessor'].each {
                add it, enforcedPlatform("com.vwgroup.hwp:common-platform:${rootProject.ext.platformVersion}")
            }

            testFixturesImplementation(
                    'org.projectlombok:lombok',
                    'org.mapstruct:mapstruct',
                    'org.mapstruct:mapstruct-processor',
            )

            testFixturesAnnotationProcessor(
                    'org.projectlombok:lombok',
                    'org.mapstruct:mapstruct',
                    'org.mapstruct:mapstruct-processor',
                    'org.projectlombok:lombok-mapstruct-binding',
                    'org.mapstruct.extensions.spring:mapstruct-spring-extensions',
                    'org.mapstruct.extensions.spring:mapstruct-spring-annotations',
                    'org.mapstruct:mapstruct-processor'
            )
        }
    }

}

task codeCoverageReport(type: JacocoReport) {

    // Gather execution data from all subprojects
    executionData fileTree(project.rootDir.absolutePath).include("build/**/jacoco/*.exec")

    // Add all relevant sourceSets from the subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.required = true
        csv.required = false
        html.required = false
    }
}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects*.check
}

// automatically create the codeCoverageReport after running check
check {
    finalizedBy codeCoverageReport
}

abstract class AbstractService implements BuildService<BuildServiceParameters.None> {}